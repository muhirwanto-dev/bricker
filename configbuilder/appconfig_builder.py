import sys
import os
import json
import openpyxl
import xml.etree.ElementTree as ET

import _config
import _constants
import xml_utils

def element_replace_attribute(element, data, attrib_key, data_key):
    if (data_key in data and element.get(attrib_key) is not None):
        element.set(attrib_key, str(data[data_key]))
        
def element_replace_attribute_if_value(element, data, attrib_key, data_key, if_attrib_value):
    for elem in element.iter():
        if (elem.get(attrib_key) == if_attrib_value):
            element_replace_attribute(elem, data, attrib_key, data_key)

def element_replace_text_if_atrrib_value(element, data, attrib_key, data_key, if_attrib_value):
    for elem in element.iter():
        if (elem.get(attrib_key) == if_attrib_value):
            elem.text = str(data[data_key])

def run():
    file = os.path.join(_config.DATA_TEXTS_PATH, 'Strings.xlsx')
    config = {}

    with open(os.path.join(_config.SCRIPTS_PATH, '_appconfig.json'), 'r') as f:
        config = json.load(f)
        
    if len(config):
        # parse string
        data = config["string"]

        if len(data):
            keys = list(data.keys())
            vals = list(data.values())
        
            wbook = openpyxl.load_workbook(file, data_only = True)
            sheet = wbook.worksheets[0]
            
            sheet.cell(3, 3, len(data))
            
            index = 0
            iter_rows = sheet.iter_rows(min_row = 5, max_row = 5 + int(len(data) - 1), min_col = 2, max_col = 4)
            for row in iter_rows:
                row[0].value = index + 1
                row[1].value = keys[index]
                row[2].value = vals[index]
                
                index += 1
                
            wbook.save(file)
            
        # parse integer
        data = config["integer"]
        
        if len(data):
            output = os.path.join(_config.DATA_VALUES_PATH, 'integers.xml')
            
            xml_root = ET.Element(None)
            xml_root.append(ET.Comment(_constants.STR_AUTOGENERATED))
            
            xml_res = ET.SubElement(xml_root, 'resources')
            
            keys = list(data.keys())
            vals = list(data.values())
            
            for i in range(len(keys)):
                xml_integer = ET.SubElement(xml_res, 'integer')
                xml_integer.set('name', 'app_' + keys[i])
                xml_integer.text = str(vals[i])

            ET.indent(xml_root)
            ET.ElementTree(xml_root).write(output, encoding = 'unicode')
            
        ns_android = xml_utils.namespace.android
        
        ET.register_namespace('android', ns_android)
    
        # override AndroidManifest
        manifest_file = os.path.join(_config.PROPERTIES_PATH, 'AndroidManifest.xml')
        manifest_root = ET.parse(manifest_file).getroot()
        
        element_replace_attribute(manifest_root, config['string'], 'package', 'package_name')
        element_replace_attribute(manifest_root, config['string'], '{%s}versionName' % ns_android, 'version_name')
        element_replace_attribute(manifest_root, config['integer'], '{%s}versionCode' % ns_android, 'version_code')
        
        ET.ElementTree(manifest_root).write(manifest_file, encoding = 'utf-8', xml_declaration = True)
        
        # override strings-crashlytics.xml
        if _config.USE_CRASHLYTICS:
            strings_file = os.path.join(_config.DATA_VALUES_PATH, 'strings-crashlytics.xml')
            strings_root = ET.parse(strings_file).getroot()
        
            element_replace_text_if_atrrib_value(strings_root, config['integer'], 'name', 'version_code', 'com.google.firebase.crashlytics.mapping_file_id')
        
            ET.ElementTree(strings_root).write(strings_file, encoding = 'utf-8', xml_declaration = False)        