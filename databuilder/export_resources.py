import os
import sys
import json
import xml.etree.ElementTree as ET

import _config
import _constants
import _utils
import xml_utils

def create_button_drawable_xml(directory, file_name, _config):
    out_name = file_name.replace("img_", "ic_")
    out_file = os.path.join(directory, out_name + '.xml')
    
    xml_root = ET.Element(None)
    xml_root.append(ET.Comment(_constants.STR_AUTOGENERATED))

    xml_ripple = ET.SubElement(xml_root, xml_utils.tag.ripple
        , attrib = {
            xml_utils.key.xmlns : xml_utils.namespace.android,
            xml_utils.key.color : _config["color"]
            } )
            
    if "number" in file_name:
        xml_item = ET.SubElement(xml_ripple, xml_utils.tag.item
            , attrib = {
                xml_utils.key.gravity : _config["gravity"]
                } )
        
        xml_item.append(ET.Element(xml_utils.tag.bitmap
            , attrib = {
                xml_utils.key.src : "@raw/" + file_name
                } ))        
    else:
        xml_item = ET.SubElement(xml_ripple, xml_utils.tag.item
            , attrib = {
                xml_utils.key.gravity : _config["gravity"],
                xml_utils.key.height : _config["height"],
                xml_utils.key.width : _config["width"]
                } )
        
        xml_item.append(ET.Element(xml_utils.tag.bitmap
            , attrib = {
                xml_utils.key.src : "@raw/" + file_name
                } ))    
            
    ET.indent(xml_root)
    ET.ElementTree(xml_root).write(out_file, encoding = 'unicode')
    
    return out_file
    
def create_image_drawable_xml(directory, file_name, _config):
    out_name = file_name.replace("img_", "img_")
    out_file = os.path.join(directory, out_name + '.xml')
    
    xml_root = ET.Element(None)
    xml_root.append(ET.Comment(_constants.STR_AUTOGENERATED))
    
    xml_layer = ET.SubElement(xml_root, xml_utils.tag.layer_list
        , attrib = {
            xml_utils.key.xmlns : xml_utils.namespace.android
            } )
    
    xml_item = ET.SubElement(xml_layer, xml_utils.tag.item
        , attrib = {
            xml_utils.key.width : _config["width"],
            xml_utils.key.height : _config["height"]
            } )
    
    xml_item.append(ET.Element(xml_utils.tag.bitmap
        , attrib = {
            xml_utils.key.src : "@raw/" + file_name
            } ))
                
    ET.indent(xml_root)
    ET.ElementTree(xml_root).write(out_file, encoding = 'unicode')
    
    return out_file

def create_drawable_xml(_img_file):
    directory = os.path.dirname(_img_file)
    file_name = os.path.splitext(os.path.basename(_img_file))[0]
    config = {}
    output = _img_file
    
    with open(os.path.join(_config.DATA_RAW_PATH, 'config.json'), 'r') as f:
        config = json.load(f)

        if (file_name in config["button"]):
            output = create_button_drawable_xml(directory, file_name, config["button"][file_name])
        elif (file_name in config["image"]):
            output = create_image_drawable_xml(directory, file_name, config["image"][file_name])
            
    return output

def run():
    images = _utils.get_file_list(_config.DATA_RAW_PATH, 'png', True)
    drawable = []

    for image in images:
        out = create_drawable_xml(image)

        if ("xml" in out):
            drawable.append(out)
            
    if (drawable):
        raw_drawable_path = os.path.join(_config.DATA_RAW_PATH, "drawable")

        _utils.create_path_if_not_exists(raw_drawable_path)
        _utils.move_files(drawable, raw_drawable_path)